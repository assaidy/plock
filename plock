#!/usr/bin/env python3

import curses
import os
import platform
import random
import re
import subprocess
import sys
import time
from datetime import datetime

COLOR_COUNT = 8


def usage() -> None:
    print(f"Usage: plock [OPTION] [TIME_FORMAT]")
    print()
    print("without options:    normal clock")
    print()
    print("OPTIONS: ")
    print("    up      [TIME_FORMAT]    Start a count-up timer")
    print("    down    [TIME_FORMAT]    Start a count-down timer")
    print("    help                     print help")
    print()
    print("time formats: [$h $m $s] [$h] [$m] [$s]")


def render_ascii_art(input: str) -> list[str]:
    ascii_art_map = {
        "0": [
            "██████",
            "██  ██",
            "██  ██",
            "██  ██",
            "██████",
        ],
        "1": [
            "  ██  ",
            "████  ",
            "  ██  ",
            "  ██  ",
            "██████",
        ],
        "2": [
            "██████",
            "    ██",
            "██████",
            "██    ",
            "██████",
        ],
        "3": [
            "██████",
            "    ██",
            "██████",
            "    ██",
            "██████",
        ],
        "4": [
            "██  ██",
            "██  ██",
            "██████",
            "    ██",
            "    ██",
        ],
        "5": [
            "██████",
            "██    ",
            "██████",
            "    ██",
            "██████",
        ],
        "6": [
            "██████",
            "██    ",
            "██████",
            "██  ██",
            "██████",
        ],
        "7": [
            "██████",
            "    ██",
            "    ██",
            "    ██",
            "    ██",
        ],
        "8": [
            "██████",
            "██  ██",
            "██████",
            "██  ██",
            "██████",
        ],
        "9": [
            "██████",
            "██  ██",
            "██████",
            "    ██",
            "██████",
        ],
        ":": [
            "      ",
            "  ██  ",
            "      ",
            "  ██  ",
            "      ",
        ],
    }

    # split the input_string into characters
    characters = list(input)

    # initialize a list to store each line of the final ASCII art
    # 5 lines for each character
    ascii_art_lines = [""] * 5

    # for each character, append the corresponding ASCII art to the lines
    for char in characters:
        char_art = ascii_art_map.get(char, ["        "] * 5)
        padding = " "
        for i in range(5):
            ascii_art_lines[i] += char_art[i] + padding

    # join the lines into a single string with newline characters
    # ascii_art = "\n".join(ascii_art_lines)

    return ascii_art_lines


def render_curs(win, ascii: list[str], color) -> None:
    heigh, width = win.getmaxyx()
    x = (width - len(ascii[0])) // 2
    y = (heigh - 5) // 2
    for i, line in enumerate(ascii):
        win.addstr(y + i, x, line, color)


def play_bell_sound(file_path) -> None:
    system_name = platform.system()
    if system_name == "Linux":
        with open(os.devnull, "w") as devnull:
            subprocess.run(["aplay", file_path], stdout=devnull, stderr=devnull)
    elif system_name == "Darwin":  # macOS
        with open(os.devnull, "w") as devnull:
            subprocess.run(["afplay", file_path], stdout=devnull, stderr=devnull)
    else:
        print("Unsupported operating system for this method")


def ftime(seconds: int) -> str:
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 3600 % 60
    return f"{hours:02}:{minutes:02}:{seconds:02}"


def extract_seconds(input: str) -> int:
    pattern = r"^(?:(\d+)h)?\s*(?:(\d+)m)?\s*(?:(\d+)s)?$"
    match = re.match(pattern, input)

    if not match:
        return -1

    hours, minutes, seconds = match.groups(default="0")
    return int(hours) * 3600 + int(minutes) * 60 + int(seconds)


def setup_curs() -> None:
    curses.noecho()
    curses.curs_set(0)

    curses.start_color()
    curses.use_default_colors()
    for i in range(1, COLOR_COUNT + 1):
        curses.init_pair(i, i, -1)


def get_rand_color():
    color_id = random.randrange(1, COLOR_COUNT + 1)
    return curses.color_pair(color_id)


def time_up(stdscr, initial):
    try:
        setup_curs()

        win = stdscr

        color = get_rand_color()

        while True:
            win.clear()
            t = ftime(initial)
            initial += 1
            ascii_str = render_ascii_art(t)
            render_curs(win, ascii_str, color)
            win.refresh()
            time.sleep(1)

            # Check for resize event
            stdscr.nodelay(True)  # Make getch non-blocking
            key = stdscr.getch()
            if key == curses.KEY_RESIZE:
                curses.resizeterm(*stdscr.getmaxyx())

    except KeyboardInterrupt:
        return


def time_down(stdscr, initial):
    try:
        setup_curs()

        win = stdscr

        color = get_rand_color()

        for i in range(initial, 0, -1):
            win.clear()
            t = ftime(i)
            ascii_str = render_ascii_art(t)
            render_curs(win, ascii_str, color)
            win.refresh()
            time.sleep(1)

            # Check for resize event
            stdscr.nodelay(True)  # Make getch non-blocking
            key = stdscr.getch()
            if key == curses.KEY_RESIZE:
                curses.resizeterm(*stdscr.getmaxyx())

        win.clear()
        ascii_str = render_ascii_art("00:00:00")
        render_curs(win, ascii_str, color)
        win.refresh()

        HOME = os.getenv("HOME")
        play_bell_sound(f"{HOME}/.local/share/plock/bell.wav")

    except KeyboardInterrupt:
        return


def time_clock(stdscr):
    try:
        setup_curs()

        win = stdscr

        color = get_rand_color()

        while True:
            win.clear()
            now = datetime.now()
            t = now.strftime("%H:%M:%S")
            ascii_str = render_ascii_art(t)
            render_curs(win, ascii_str, color)
            win.refresh()
            time.sleep(1)

            # Check for resize event
            stdscr.nodelay(True)  # Make getch non-blocking
            key = stdscr.getch()
            if key == curses.KEY_RESIZE:
                curses.resizeterm(*stdscr.getmaxyx())

    except KeyboardInterrupt:
        return


def main() -> None:
    if len(sys.argv) == 1:
        curses.wrapper(time_clock)
    else:
        args = sys.argv[1:]
        if args[0] == "up":
            start = 0
            if len(args) > 1:
                start = extract_seconds(args[1])
                if start < 0:
                    print(f"[ERROR] invalid time format.")
                    usage()
                    exit(1)
            curses.wrapper(time_up, start)

        elif args[0] == "down":
            if len(args) < 2:
                usage()
                exit(1)
            start = extract_seconds(args[1])
            if start < 0:
                print(f"[ERROR] invalid time format.")
                usage()
                exit(1)
            curses.wrapper(time_down, start)

        else:
            usage()


if __name__ == "__main__":
    main()
